{"version":3,"sources":["../../robotfriends/src/components/Card.js","../../robotfriends/src/components/CardList.js","../../robotfriends/src/components/SearchBox.js","../../robotfriends/src/components/Scroll.js","../../robotfriends/src/containers/App.js","../../robotfriends/src/serviceWorker.js","../../robotfriends/src/index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","user","i","components_Card","key","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","target","value","state","_this2","fetch","then","response","json","users","_this3","_this$state","sRobot","filter","robot","toLowerCase","includes","length","components_SearchBox","components_Scroll","components_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAgBeA,EAdF,SAAAC,GACb,IADeC,EACfD,EADeC,KAAOC,EACtBF,EADsBE,MAAOC,EAC7BH,EAD6BG,GAE5B,OAECC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gDACfH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,SAASC,IAAG,wBAAAC,OAA0BP,EAA1B,cACrBC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAKL,GACLG,EAAAC,EAAAC,cAAA,SAAIJ,MCWSS,EAnBE,SAAAX,GAAgB,IAAbY,EAAaZ,EAAbY,OACpB,OACCR,EAAAC,EAAAC,cAAA,WAEDM,EAAOC,IAAI,SAACC,EAAKC,GAEhB,OAAQX,EAAAC,EAAAC,cAACU,EAAD,CACPC,IAAMF,EACLZ,GAAIS,EAAOG,GAAGZ,GACbF,KAAMW,EAAOG,GAAGd,KACfC,MAASU,EAAOG,GAAGb,YCITgB,EAdG,SAAAlB,GAClBA,EADoBmB,YACpB,IADiCC,EACjCpB,EADiCoB,aAEhC,OACChB,EAAAC,EAAAC,cAAA,OAAKC,UAAW,OAChBH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,mCAChBc,KAAK,SACJC,YAAY,gBACZC,SAAYH,MCGDI,SAVA,SAACC,GAEf,OACArB,EAAAC,EAAAC,cAAA,OAAKoB,MAAQ,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAO,UACpEJ,EAAMK,YC2COC,cA3Cd,SAAAA,IACA,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACCC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAeDI,eAAkB,SAACC,GAClBR,EAAKS,SAAS,CAACtB,YAAaqB,EAAME,OAAOC,SAfzCX,EAAKY,MACL,CACChC,OAAS,GACXO,YAAa,IALba,mFAUA,IAAAa,EAAAV,KACCW,MAAM,8CACLC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAK,OAAIL,EAAKJ,SAAS,CAAC7B,OAASsC,uCAQxC,IAAAC,EAAAhB,KAAAiB,EAC+BjB,KAAKS,MAA5BhC,EADRwC,EACQxC,OAECyC,GAHTD,EACgBjC,YAEEP,EAAO0C,OAAO,SAAAC,GAE5B,OAAOA,EAAMtD,KAAKuD,cAAcC,SAASN,EAAKP,MAAMzB,YAAYqC,kBAEjE,OAAQ5C,EAAO8C,OAGftD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACfH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,gBACAH,EAAAC,EAAAC,cAACqD,EAAD,CAAWvC,aAAgBe,KAAKI,iBAChCnC,EAAAC,EAAAC,cAACsD,EAAD,KACAxD,EAAAC,EAAAC,cAACuD,EAAD,CAAUjD,OAAUyC,MANpBjD,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,kBA/BcuD,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECZNC,IAASC,OACTjE,EAAAC,EAAAC,cAACgE,EAAD,MACGC,SAASC,eAAe,SDyHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,KAAK,SAAA6B,GACjCA,EAAaC","file":"static/js/main.7c223821.chunk.js","sourcesContent":["import React from 'react'; \r\n\r\nconst Card = ({name , email, id}) =>\r\n{ \r\n\treturn (\r\n\r\n\t\t<div className=\"tc bg-pink dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n\t\t<img alt=\"robots\" src={`https://robohash.org/${id}?200x200`} />\r\n\t\t<div>\r\n\t\t<h2>{name}</h2>\r\n\t\t<p>{email}</p>\r\n\t\t</div>\r\n\t\t</div>\r\n\t\t); \r\n}\r\n\r\nexport default Card; ","import React from 'react'; \r\nimport Card from './Card'; \r\nconst CardList = ({ robots }) => {\r\nreturn (\r\n\t<div>\r\n\t{\r\nrobots.map((user,i) =>\r\n{\r\n\treturn (<Card\r\n\t key ={i}\r\n\t  id={robots[i].id}\r\n\t   name={robots[i].name}\r\n\t    email = {robots[i].email}\r\n\t     />\r\n\t     );\r\n})\r\n}\r\n\t</div>\r\n\t);\r\n}\r\n\r\nexport default CardList ; ","import React from 'react'; \r\n\r\nconst SearchBox = ({searchField, searchChange}) =>\r\n{\r\n\treturn (\r\n\t\t<div className ='pa2'> \r\n\t\t<input className='pa3 ba b--green bg-lightest-blue'\r\n\t\t type='search'\r\n\t\t  placeholder='search robots' \r\n\t\t  onChange = {searchChange}\r\n\t\t  />\r\n\t\t  </div> \r\n\t\t); \r\n\t\r\n}\r\n\r\nexport default SearchBox; ","import React from 'react' ; \r\n\r\nconst Scroll = (props) => \r\n{\r\n\treturn (\r\n\t<div style ={{overflowY :'scroll', border: '1px solid black', height:'500px'}}>\r\n\t{props.children}\r\n\t </div>\r\n\t ); \r\n}; \r\n\r\n\r\nexport default Scroll ; \r\n","import React, {Component} from 'react'; \r\nimport CardList from '../components/CardList'; \r\nimport SearchBox from '../components/SearchBox';  \r\nimport './App.css'; \r\nimport Scroll from '../components/Scroll' ; \r\nclass App extends Component {\r\n\tconstructor()\r\n\t{\r\n\t\tsuper(); \r\n\t\tthis.state = \r\n\t\t{\r\n\t\t\trobots : [], \r\n\tsearchField: ''\r\n\t\t} \r\n\t}\r\n\r\n\tcomponentDidMount()\r\n\t{\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response => response.json())\r\n\t\t.then(users => this.setState({robots : users})) ; \r\n\t}\r\n\r\n\tonSearchChange =  (event) =>\r\n\t{this.setState({searchField: event.target.value})\r\n\r\n\t}\r\n\trender()\r\n\t{\r\n\t\tconst {robots, searchField} = this.state; \r\n\r\n\t\t\t\tconst sRobot = robots.filter(robot =>\r\n\t\t\t\t{\r\n\t\t\t\t\treturn robot.name.toLowerCase().includes(this.state.searchField.toLowerCase()); \r\n\t\t\t\t})\r\n\t\t\t\treturn !robots.length ?\r\n\t\t\t\t<h1 className='tc'>Loading</h1> :\r\n\t\t\t\t (\r\n\t\t\t\t<div className='tc'>\r\n\t\t\t\t<h1 className='f1'>Robo Friends</h1>\r\n\t\t\t\t<SearchBox searchChange = {this.onSearchChange}/>\r\n\t\t\t\t<Scroll> \r\n\t\t\t\t<CardList robots = {sRobot} />\r\n\t\t\t\t</Scroll>\r\n\t\t\t\t</div>\r\n\t\t\t\t);\r\n\t\t}\r\n}\r\n\r\nexport default App; ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n import App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';  \nReactDOM.render(\n<App />\n\t, document.getElementById('root'));\n\nserviceWorker.unregister();\n\n"],"sourceRoot":""}